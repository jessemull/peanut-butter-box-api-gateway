service: peanut-butter-box-api-gateway
  
configValidationMode: error

custom:
  baseUrl:
    dev: https://dev.peanutbutterbox.org
    prod: https://peanutbutterbox.org
  dynamodb:
    stages:
      - dev
      - prod
  productsTableName: 'products-table-${opt:stage}'
  usersTableName: 'users-table-${opt:stage}'
  
provider:
  name: aws
  stage: ${opt:stage}
  runtime: nodejs12.x
  region: us-east-1
  lambdaHashingVersion: 20201221
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn"] }
            - { "Fn::GetAtt": ["ProductsDynamoDBTable", "Arn"] }
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
          Resource:
            - arn:aws:secretsmanager:us-east-1:771265364914:secret:okta-api-key-5kfnQA
            - arn:aws:secretsmanager:us-east-1:771265364914:secret:usps-id-L0qen7
            - arn:aws:secretsmanager:us-east-1:771265364914:secret:google-places-api-key-01QuNC
        - Effect: Allow
          Action:
            - ses:SendEmail
          Resource:
            - arn:aws:ses:us-east-1:771265364914:identity/*
  environment:
    API_KEY_SECRET_NAME: 'okta-api-key'
    AUDIENCE: api://default
    BASE_URL: ${self:custom.baseUrl.${opt:stage}}
    GOOGLE_API_KEY_SECRET_NAME: 'google-places-api-key'
    GOOGLE_API_URL: 'https://maps.googleapis.com'
    OKTA_DOMAIN: 'https://dev-82492334.okta.com'
    OKTA_JWT_AUDIENCE: 'api://default'
    PRODUCTS_TABLE: ${self:custom.productsTableName}
    USERS_TABLE: ${self:custom.usersTableName}
    USPS_ID_SECRET_NAME: 'usps-id'
    USPS_URL: 'https://secure.shippingapis.com'
    
functions:
  app:
    handler: src/index.handler
    events:
      - http: ANY /
  adminauthorizer:
    handler: src/index.adminauthorizer
  authorizer:
    handler: src/index.authorizer
  autocompleteAddress:
    handler: src/index.handler
    events:
      - http:
          cors: true
          path: /places/autocomplete/address
          method: get
  autocompleteCity:
    handler: src/index.handler
    events:
      - http:
          cors: true
          path: /places/autocomplete/city
          method: get
  autocompleteState:
    handler: src/index.handler
    events:
      - http:
          cors: true
          path: /places/autocomplete/state
          method: get
  getDetails:
    handler: src/index.handler
    events:
      - http:
          cors: true
          path: /places/details
          method: get
  getHealthcheck:
    handler: src/index.handler
    events:
      - http:
          cors: true
          path: /healthcheck
          method: get
  changePassword:
    handler: src/index.handler
    events:
      - http: 
          authorizer: authorizer
          cors: true
          method: post
          path: /users/change
  deleteUser:
    handler: src/index.handler
    events:
      - http: 
          authorizer: authorizer
          cors: true
          method: delete
          path: /users
  getUser:
    handler: src/index.handler
    events:
      - http: 
          authorizer: authorizer
          cors: true
          method: get
          path: /users
  postUser:
    handler: src/index.handler
    events:
      - http:
          cors: true
          method: post
          path: /users
  putUser:
    handler: src/index.handler
    events:
      - http:
          authorizer: authorizer
          cors: true
          method: put
          path: /users
  requestUserReset:
    handler: src/index.handler
    events:
      - http:
          cors: true
          method: post
          path: /users/request/reset
  userReset:
    handler: src/index.handler
    events:
      - http:
          cors: true
          method: post
          path: /users/reset
  verifyAddress:
    handler: src/index.handler
    events:
      - http:
          cors: true
          method: post
          path: /usps/verify
  verifyUser:
    handler: src/index.handler
    events:
      - http:
          cors: true
          method: post
          path: /users/verify
  getProducts:
    handler: src/index.handler
    events:
      - http:
          cors: true
          method: get
          path: /products
  createProduct:
    handler: src/index.handler
    events:
      - http:
          authorizer: adminauthorizer
          cors: true
          method: post
          path: /products
  updateproduct:
    handler: src/index.handler
    events:
      - http:
          authorizer: adminauthorizer
          cors: true
          method: put
          path: /products/{productId}
          request:
            parameters:
              paths:
                productid: true
  deleteProduct:
    handler: src/index.handler
    events:
      - http:
          authorizer: adminauthorizer
          cors: true
          method: delete
          path: /products/{productId}
          request:
            parameters:
              paths:
                productid: true

plugins:
  - serverless-plugin-typescript
  - serverless-offline

resources:
  Resources:
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: email
            AttributeType: S
        KeySchema:
          -
            AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.usersTableName}
    ProductsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: productId
            AttributeType: S
        KeySchema:
          -
            AttributeName: productId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.productsTableName}
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId: 
          Ref: 'ApiGatewayRestApi'