service: peanut-butter-box-api-gateway
  
configValidationMode: error

custom:
  baseUrl:
    dev: https://dev.peanutbutterbox.org
    prod: https://peanutbutterbox.org
  dynamodb:
    stages:
      - dev
      - prod
  tableName: 'users-table-${opt:stage}'
  
provider:
  name: aws
  stage: ${opt:stage}
  runtime: nodejs12.x
  region: us-east-1
  lambdaHashingVersion: 20201221
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn"] }
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
          Resource:
            - arn:aws:secretsmanager:us-east-1:771265364914:secret:okta-api-key-5kfnQA
        - Effect: Allow
          Action:
            - ses:SendEmail
          Resource:
            - arn:aws:ses:us-east-1:771265364914:identity/*
  environment:
    API_KEY_SECRET_NAME: 'okta-api-key'
    AUDIENCE: api://default
    BASE_URL: ${self:custom.baseUrl.${opt:stage}}
    OKTA_DOMAIN: 'https://dev-82492334.okta.com'
    OKTA_JWT_AUDIENCE: 'api://default'
    USERS_TABLE: ${self:custom.tableName}
    
functions:
  app:
    handler: src/index.handler
    events:
      - http: ANY /
  authorizer:
    handler: src/index.authorizer
  getHealthcheck:
    handler: src/index.handler
    events:
      - http:
          path: /healthcheck
          method: get
  deleteUser:
    handler: src/index.handler
    events:
      - http: 
          authorizer: authorizer
          method: delete
          path: /users
  getUser:
    handler: src/index.handler
    events:
      - http: 
          authorizer: authorizer
          method: get
          path: /users
        
  postUser:
    handler: src/index.handler
    events:
      - http:
          method: post
          path: /users
  putUser:
    handler: src/index.handler
    events:
      - http:
          authorizer: authorizer
          method: put
          path: /users
  requestUserReset:
    handler: src/index.handler
    events:
      - http:
          method: post
          path: /users/request/reset
  userReset:
    handler: src/index.handler
    events:
      - http:
          method: post
          path: /users/reset
  verifyUser:
    handler: src/index.handler
    events:
      - http:
          method: post
          path: /users/verify

plugins:
  - serverless-plugin-typescript
  - serverless-offline

resources:
  Resources:
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: email
            AttributeType: S
        KeySchema:
          -
            AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}